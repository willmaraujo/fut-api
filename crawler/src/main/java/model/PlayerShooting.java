/*
 * FutDB
 * The Fifa Ultimate Team Database API is a JSON REST API.<br> We offer a complete, easy to understand JSON REST API with a complete database of players, prices, nations, leagues, clubs, and card-types.<br> Please note that some data fields are only delivered with a premium account.
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package model;

import com.google.gson.annotations.SerializedName;


import java.util.Objects;

/**
 * PlayerShooting
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-05-24T14:15:34.912+02:00")
public class PlayerShooting {
  @SerializedName("positioning")
  private Integer positioning = null;

  @SerializedName("finishing")
  private Integer finishing = null;

  @SerializedName("shot_power")
  private Integer shotPower = null;

  @SerializedName("long_shots")
  private Integer longShots = null;

  @SerializedName("volleys")
  private Integer volleys = null;

  @SerializedName("penalties")
  private Integer penalties = null;

  public PlayerShooting positioning(Integer positioning) {
    this.positioning = positioning;
    return this;
  }

   /**
   * Get positioning
   * @return positioning
  **/

  public Integer getPositioning() {
    return positioning;
  }

  public void setPositioning(Integer positioning) {
    this.positioning = positioning;
  }

  public PlayerShooting finishing(Integer finishing) {
    this.finishing = finishing;
    return this;
  }

   /**
   * Get finishing
   * @return finishing
  **/

  public Integer getFinishing() {
    return finishing;
  }

  public void setFinishing(Integer finishing) {
    this.finishing = finishing;
  }

  public PlayerShooting shotPower(Integer shotPower) {
    this.shotPower = shotPower;
    return this;
  }

   /**
   * Get shotPower
   * @return shotPower
  **/

  public Integer getShotPower() {
    return shotPower;
  }

  public void setShotPower(Integer shotPower) {
    this.shotPower = shotPower;
  }

  public PlayerShooting longShots(Integer longShots) {
    this.longShots = longShots;
    return this;
  }

   /**
   * Get longShots
   * @return longShots
  **/

  public Integer getLongShots() {
    return longShots;
  }

  public void setLongShots(Integer longShots) {
    this.longShots = longShots;
  }

  public PlayerShooting volleys(Integer volleys) {
    this.volleys = volleys;
    return this;
  }

   /**
   * Get volleys
   * @return volleys
  **/

  public Integer getVolleys() {
    return volleys;
  }

  public void setVolleys(Integer volleys) {
    this.volleys = volleys;
  }

  public PlayerShooting penalties(Integer penalties) {
    this.penalties = penalties;
    return this;
  }

   /**
   * Get penalties
   * @return penalties
  **/

  public Integer getPenalties() {
    return penalties;
  }

  public void setPenalties(Integer penalties) {
    this.penalties = penalties;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerShooting playerShooting = (PlayerShooting) o;
    return Objects.equals(this.positioning, playerShooting.positioning) &&
        Objects.equals(this.finishing, playerShooting.finishing) &&
        Objects.equals(this.shotPower, playerShooting.shotPower) &&
        Objects.equals(this.longShots, playerShooting.longShots) &&
        Objects.equals(this.volleys, playerShooting.volleys) &&
        Objects.equals(this.penalties, playerShooting.penalties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(positioning, finishing, shotPower, longShots, volleys, penalties);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerShooting {\n");
    
    sb.append("    positioning: ").append(toIndentedString(positioning)).append("\n");
    sb.append("    finishing: ").append(toIndentedString(finishing)).append("\n");
    sb.append("    shotPower: ").append(toIndentedString(shotPower)).append("\n");
    sb.append("    longShots: ").append(toIndentedString(longShots)).append("\n");
    sb.append("    volleys: ").append(toIndentedString(volleys)).append("\n");
    sb.append("    penalties: ").append(toIndentedString(penalties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

