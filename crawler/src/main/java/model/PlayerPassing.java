/*
 * FutDB
 * The Fifa Ultimate Team Database API is a JSON REST API.<br> We offer a complete, easy to understand JSON REST API with a complete database of players, prices, nations, leagues, clubs, and card-types.<br> Please note that some data fields are only delivered with a premium account.
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package model;

import com.google.gson.annotations.SerializedName;


import java.util.Objects;

/**
 * PlayerPassing
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-05-24T14:15:34.912+02:00")
public class PlayerPassing {
  @SerializedName("vision")
  private Integer vision = null;

  @SerializedName("crossing")
  private Integer crossing = null;

  @SerializedName("free_kick_accuracy")
  private Integer freeKickAccuracy = null;

  @SerializedName("short_passing")
  private Integer shortPassing = null;

  @SerializedName("long_passing")
  private Integer longPassing = null;

  @SerializedName("curve")
  private Integer curve = null;

  public PlayerPassing vision(Integer vision) {
    this.vision = vision;
    return this;
  }

   /**
   * Get vision
   * @return vision
  **/

  public Integer getVision() {
    return vision;
  }

  public void setVision(Integer vision) {
    this.vision = vision;
  }

  public PlayerPassing crossing(Integer crossing) {
    this.crossing = crossing;
    return this;
  }

   /**
   * Get crossing
   * @return crossing
  **/

  public Integer getCrossing() {
    return crossing;
  }

  public void setCrossing(Integer crossing) {
    this.crossing = crossing;
  }

  public PlayerPassing freeKickAccuracy(Integer freeKickAccuracy) {
    this.freeKickAccuracy = freeKickAccuracy;
    return this;
  }

   /**
   * Get freeKickAccuracy
   * @return freeKickAccuracy
  **/

  public Integer getFreeKickAccuracy() {
    return freeKickAccuracy;
  }

  public void setFreeKickAccuracy(Integer freeKickAccuracy) {
    this.freeKickAccuracy = freeKickAccuracy;
  }

  public PlayerPassing shortPassing(Integer shortPassing) {
    this.shortPassing = shortPassing;
    return this;
  }

   /**
   * Get shortPassing
   * @return shortPassing
  **/

  public Integer getShortPassing() {
    return shortPassing;
  }

  public void setShortPassing(Integer shortPassing) {
    this.shortPassing = shortPassing;
  }

  public PlayerPassing longPassing(Integer longPassing) {
    this.longPassing = longPassing;
    return this;
  }

   /**
   * Get longPassing
   * @return longPassing
  **/

  public Integer getLongPassing() {
    return longPassing;
  }

  public void setLongPassing(Integer longPassing) {
    this.longPassing = longPassing;
  }

  public PlayerPassing curve(Integer curve) {
    this.curve = curve;
    return this;
  }

   /**
   * Get curve
   * @return curve
  **/

  public Integer getCurve() {
    return curve;
  }

  public void setCurve(Integer curve) {
    this.curve = curve;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerPassing playerPassing = (PlayerPassing) o;
    return Objects.equals(this.vision, playerPassing.vision) &&
        Objects.equals(this.crossing, playerPassing.crossing) &&
        Objects.equals(this.freeKickAccuracy, playerPassing.freeKickAccuracy) &&
        Objects.equals(this.shortPassing, playerPassing.shortPassing) &&
        Objects.equals(this.longPassing, playerPassing.longPassing) &&
        Objects.equals(this.curve, playerPassing.curve);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vision, crossing, freeKickAccuracy, shortPassing, longPassing, curve);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerPassing {\n");
    
    sb.append("    vision: ").append(toIndentedString(vision)).append("\n");
    sb.append("    crossing: ").append(toIndentedString(crossing)).append("\n");
    sb.append("    freeKickAccuracy: ").append(toIndentedString(freeKickAccuracy)).append("\n");
    sb.append("    shortPassing: ").append(toIndentedString(shortPassing)).append("\n");
    sb.append("    longPassing: ").append(toIndentedString(longPassing)).append("\n");
    sb.append("    curve: ").append(toIndentedString(curve)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

