/*
 * FutDB
 * The Fifa Ultimate Team Database API is a JSON REST API.<br> We offer a complete, easy to understand JSON REST API with a complete database of players, prices, nations, leagues, clubs, and card-types.<br> Please note that some data fields are only delivered with a premium account.
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package model;

import com.google.gson.annotations.SerializedName;


import java.util.Objects;

/**
 * PlayerDribbling
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-05-24T14:15:34.912+02:00")
public class PlayerDribbling {
  @SerializedName("agility")
  private Integer agility = null;

  @SerializedName("balance")
  private Integer balance = null;

  @SerializedName("reactions")
  private Integer reactions = null;

  @SerializedName("ball_control")
  private Integer ballControl = null;

  @SerializedName("dribbling")
  private Integer dribbling = null;

  @SerializedName("composure")
  private Integer composure = null;

  public PlayerDribbling agility(Integer agility) {
    this.agility = agility;
    return this;
  }

   /**
   * Get agility
   * @return agility
  **/

  public Integer getAgility() {
    return agility;
  }

  public void setAgility(Integer agility) {
    this.agility = agility;
  }

  public PlayerDribbling balance(Integer balance) {
    this.balance = balance;
    return this;
  }

   /**
   * Get balance
   * @return balance
  **/

  public Integer getBalance() {
    return balance;
  }

  public void setBalance(Integer balance) {
    this.balance = balance;
  }

  public PlayerDribbling reactions(Integer reactions) {
    this.reactions = reactions;
    return this;
  }

   /**
   * Get reactions
   * @return reactions
  **/

  public Integer getReactions() {
    return reactions;
  }

  public void setReactions(Integer reactions) {
    this.reactions = reactions;
  }

  public PlayerDribbling ballControl(Integer ballControl) {
    this.ballControl = ballControl;
    return this;
  }

   /**
   * Get ballControl
   * @return ballControl
  **/

  public Integer getBallControl() {
    return ballControl;
  }

  public void setBallControl(Integer ballControl) {
    this.ballControl = ballControl;
  }

  public PlayerDribbling dribbling(Integer dribbling) {
    this.dribbling = dribbling;
    return this;
  }

   /**
   * Get dribbling
   * @return dribbling
  **/

  public Integer getDribbling() {
    return dribbling;
  }

  public void setDribbling(Integer dribbling) {
    this.dribbling = dribbling;
  }

  public PlayerDribbling composure(Integer composure) {
    this.composure = composure;
    return this;
  }

   /**
   * Get composure
   * @return composure
  **/

  public Integer getComposure() {
    return composure;
  }

  public void setComposure(Integer composure) {
    this.composure = composure;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerDribbling playerDribbling = (PlayerDribbling) o;
    return Objects.equals(this.agility, playerDribbling.agility) &&
        Objects.equals(this.balance, playerDribbling.balance) &&
        Objects.equals(this.reactions, playerDribbling.reactions) &&
        Objects.equals(this.ballControl, playerDribbling.ballControl) &&
        Objects.equals(this.dribbling, playerDribbling.dribbling) &&
        Objects.equals(this.composure, playerDribbling.composure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agility, balance, reactions, ballControl, dribbling, composure);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerDribbling {\n");
    
    sb.append("    agility: ").append(toIndentedString(agility)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    reactions: ").append(toIndentedString(reactions)).append("\n");
    sb.append("    ballControl: ").append(toIndentedString(ballControl)).append("\n");
    sb.append("    dribbling: ").append(toIndentedString(dribbling)).append("\n");
    sb.append("    composure: ").append(toIndentedString(composure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

