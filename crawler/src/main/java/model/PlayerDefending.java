/*
 * FutDB
 * The Fifa Ultimate Team Database API is a JSON REST API.<br> We offer a complete, easy to understand JSON REST API with a complete database of players, prices, nations, leagues, clubs, and card-types.<br> Please note that some data fields are only delivered with a premium account.
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package model;

import com.google.gson.annotations.SerializedName;


import java.util.Objects;

/**
 * PlayerDefending
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-05-24T14:15:34.912+02:00")
public class PlayerDefending {
  @SerializedName("interceptions")
  private Integer interceptions = null;

  @SerializedName("heading_accuracy")
  private Integer headingAccuracy = null;

  @SerializedName("standing_tackle")
  private Integer standingTackle = null;

  @SerializedName("sliding_tackle")
  private Integer slidingTackle = null;

  public PlayerDefending interceptions(Integer interceptions) {
    this.interceptions = interceptions;
    return this;
  }

   /**
   * Get interceptions
   * @return interceptions
  **/

  public Integer getInterceptions() {
    return interceptions;
  }

  public void setInterceptions(Integer interceptions) {
    this.interceptions = interceptions;
  }

  public PlayerDefending headingAccuracy(Integer headingAccuracy) {
    this.headingAccuracy = headingAccuracy;
    return this;
  }

   /**
   * Get headingAccuracy
   * @return headingAccuracy
  **/

  public Integer getHeadingAccuracy() {
    return headingAccuracy;
  }

  public void setHeadingAccuracy(Integer headingAccuracy) {
    this.headingAccuracy = headingAccuracy;
  }

  public PlayerDefending standingTackle(Integer standingTackle) {
    this.standingTackle = standingTackle;
    return this;
  }

   /**
   * Get standingTackle
   * @return standingTackle
  **/

  public Integer getStandingTackle() {
    return standingTackle;
  }

  public void setStandingTackle(Integer standingTackle) {
    this.standingTackle = standingTackle;
  }

  public PlayerDefending slidingTackle(Integer slidingTackle) {
    this.slidingTackle = slidingTackle;
    return this;
  }

   /**
   * Get slidingTackle
   * @return slidingTackle
  **/

  public Integer getSlidingTackle() {
    return slidingTackle;
  }

  public void setSlidingTackle(Integer slidingTackle) {
    this.slidingTackle = slidingTackle;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerDefending playerDefending = (PlayerDefending) o;
    return Objects.equals(this.interceptions, playerDefending.interceptions) &&
        Objects.equals(this.headingAccuracy, playerDefending.headingAccuracy) &&
        Objects.equals(this.standingTackle, playerDefending.standingTackle) &&
        Objects.equals(this.slidingTackle, playerDefending.slidingTackle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interceptions, headingAccuracy, standingTackle, slidingTackle);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerDefending {\n");
    
    sb.append("    interceptions: ").append(toIndentedString(interceptions)).append("\n");
    sb.append("    headingAccuracy: ").append(toIndentedString(headingAccuracy)).append("\n");
    sb.append("    standingTackle: ").append(toIndentedString(standingTackle)).append("\n");
    sb.append("    slidingTackle: ").append(toIndentedString(slidingTackle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

